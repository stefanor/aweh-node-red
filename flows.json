[
    {
        "id": "e595066f0438a795",
        "type": "tab",
        "label": "OP - MANDATORY Universal nodes ",
        "disabled": false,
        "info": "These nodes must ALLWAYS be implemented",
        "env": []
    },
    {
        "id": "a0153a2235a01066",
        "type": "tab",
        "label": "OP - MANDATORY Balancing Sub-Flow & System-Wide Vars ",
        "disabled": false,
        "info": "These nodes must ALLWAYS be implemented unless no charging sequences are being used\n\nThe base of this flow is managed with BMS returning info on balancing cells or not. \nAdapt accordingly. Further info on what to do in description of balancing timer and activation",
        "env": []
    },
    {
        "id": "2cfbbcc39f1935b5",
        "type": "tab",
        "label": "AC Current Limit",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d2855c6ff5fe1d8c",
        "type": "tab",
        "label": "OP - Charge Cycle Management",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "81c7a8a38f0557f0",
        "type": "tab",
        "label": "OP - Solar cycle Management",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "victron-client-id",
        "type": "victron-client"
    },
    {
        "id": "39ad39b479732dac",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "0d42c411c0f4bfb3",
        "type": "ui_group",
        "name": "Debugging and test",
        "tab": "a5c8d9b83d2c4ccd",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "7e2c0f9765da0a44",
        "type": "ui_tab",
        "name": "Aweh Dashboard",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0489adf761799c8a",
        "type": "ui_group",
        "name": "Battery Balancing",
        "tab": "7e2c0f9765da0a44",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": true,
        "className": ""
    },
    {
        "id": "ac4b716fdfe49bfc",
        "type": "ui_spacer",
        "z": "d2855c6ff5fe1d8c",
        "name": "spacer",
        "group": "2d51d403d65e5320",
        "order": 2,
        "width": "9",
        "height": "1"
    },
    {
        "id": "bfe20f37dd8c181d",
        "type": "ui_spacer",
        "z": "d2855c6ff5fe1d8c",
        "name": "spacer",
        "group": "2d51d403d65e5320",
        "order": 8,
        "width": "9",
        "height": "1"
    },
    {
        "id": "0d2ca6014d4397c9",
        "type": "ui_spacer",
        "z": "d2855c6ff5fe1d8c",
        "name": "spacer",
        "group": "0489adf761799c8a",
        "order": 3,
        "width": 9,
        "height": 1
    },
    {
        "id": "c0317c68841420ba",
        "type": "ui_spacer",
        "z": "d2855c6ff5fe1d8c",
        "name": "spacer",
        "group": "0489adf761799c8a",
        "order": 5,
        "width": 9,
        "height": 1
    },
    {
        "id": "af4cc6ee5f16bc57",
        "type": "ui_spacer",
        "z": "d2855c6ff5fe1d8c",
        "name": "spacer",
        "group": "0489adf761799c8a",
        "order": 13,
        "width": 9,
        "height": 1
    },
    {
        "id": "2d51d403d65e5320",
        "type": "ui_group",
        "name": "Shore Power & Charge Cycle",
        "tab": "7e2c0f9765da0a44",
        "order": 2,
        "disp": true,
        "width": "9",
        "collapse": true,
        "className": ""
    },
    {
        "id": "a5c8d9b83d2c4ccd",
        "type": "ui_tab",
        "d": true,
        "name": "Debugging",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5bdd7071be620899",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "Default StorMaxSOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "70",
        "payloadType": "num",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "aafd072fdc3d20f1"
            ]
        ]
    },
    {
        "id": "5b93219ec9a70fbe",
        "type": "function",
        "z": "e595066f0438a795",
        "name": "Debug for global stored values ",
        "func": "const variableNames = [\n    \"BattSoc\",\n    \"ChargeToFull\",\n    \"MultiChargeEnabled\",\n    \"MultiMaxSoc\",\n    \"RestartSoc\",\n    \"SailMaxSoc\",\n    \"SailRestartSoc\",\n    \"SolarMaxSoc\",\n    \"StorMaxSoc\",\n    \"StorRestartSoc\",\n];\n\nconst globalValues = Object.fromEntries(\n    variableNames.map(name => [name, global.get(name)])\n);\n\nreturn {\n    payload: globalValues,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 520,
        "wires": [
            [
                "8c1672f801313817"
            ]
        ]
    },
    {
        "id": "8c1672f801313817",
        "type": "debug",
        "z": "e595066f0438a795",
        "name": "Global variables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 520,
        "wires": []
    },
    {
        "id": "a9fc34a6164cbf90",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "5b93219ec9a70fbe"
            ]
        ]
    },
    {
        "id": "4a3c0f4f4028d864",
        "type": "comment",
        "z": "e595066f0438a795",
        "name": "Debug",
        "info": "",
        "x": 50,
        "y": 460,
        "wires": []
    },
    {
        "id": "153ab54281d9537e",
        "type": "comment",
        "z": "e595066f0438a795",
        "name": "Universal global variables",
        "info": "",
        "x": 110,
        "y": 20,
        "wires": []
    },
    {
        "id": "04277a6155c283cb",
        "type": "victron-input-battery",
        "z": "e595066f0438a795",
        "service": "com.victronenergy.battery/0",
        "path": "/Soc",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Aweh BMS"
        },
        "pathObj": {
            "path": "/Soc",
            "type": "float",
            "name": "State of charge (%)"
        },
        "name": "Battery SOC",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 90,
        "y": 340,
        "wires": [
            [
                "fe11ad36481aa016"
            ]
        ]
    },
    {
        "id": "f91dc601970363d1",
        "type": "ui_gauge",
        "z": "e595066f0438a795",
        "name": "Battery SOC",
        "group": "0489adf761799c8a",
        "order": 16,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Battery SOC",
        "label": "%",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ca3838",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "90",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 340,
        "wires": []
    },
    {
        "id": "43794d22e6b02aa9",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "Default  Storage Restart SOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "40",
        "payloadType": "num",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "f21f2c0c4dd91339"
            ]
        ]
    },
    {
        "id": "741fa095bb9d5e2c",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "Default Sail RestartSOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "85",
        "payloadType": "num",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "0f5154044ec2d735"
            ]
        ]
    },
    {
        "id": "9b9298a19589e0ed",
        "type": "inject",
        "z": "e595066f0438a795",
        "name": "Default SailMaxSOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "98",
        "payloadType": "num",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "7b66fe3d0b1d2119"
            ]
        ]
    },
    {
        "id": "aafd072fdc3d20f1",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "StorMaxSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7b66fe3d0b1d2119",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SailMaxSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "f21f2c0c4dd91339",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "StorRestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "0f5154044ec2d735",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SailRestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fe11ad36481aa016",
        "type": "change",
        "z": "e595066f0438a795",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BattSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 340,
        "wires": [
            [
                "f91dc601970363d1"
            ]
        ]
    },
    {
        "id": "740f0a4e23ca1d56",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Trigger if past BalanceInterval",
        "func": "const currentTimestamp = Date.now();\nconst LastBalance = flow.get(\"LastBalance\");\nconst BalanceInterval = flow.get(\"BalanceInterval\");\nlet ChargeToFull = global.get(\"ChargeToFull\");\n\nif (ChargeToFull === 1) {\n    node.status({fill: \"yellow\", shape: \"dot\", text: \"Charge to Full\"});\n    return;\n} else if (ChargeToFull === 0) {\n    const millisSinceLastBalance = currentTimestamp - LastBalance;\n    const millisBalanceInterval = BalanceInterval * 24 * 60 * 60 * 1000;\n    if (millisSinceLastBalance >= millisBalanceInterval) {\n        node.status({fill: \"yellow\", shape: \"dot\", text: \"Charge to Full\"});\n        return {\n            payload: 1,\n        };\n    }\n}\n\nnode.status({fill: \"green\", shape: \"dot\", text: \"Normal Operation\"});",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 700,
        "wires": [
            [
                "8d13abf189e782ed"
            ]
        ]
    },
    {
        "id": "5a039f79dac8db60",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "Run every ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "740f0a4e23ca1d56"
            ]
        ]
    },
    {
        "id": "71f3e6035ef1ebf1",
        "type": "ui_text",
        "z": "a0153a2235a01066",
        "group": "0489adf761799c8a",
        "order": 8,
        "width": 5,
        "height": 1,
        "name": "LastBalanceDate",
        "label": "Last Balance Date",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 890,
        "y": 400,
        "wires": []
    },
    {
        "id": "88e8f33706081c18",
        "type": "ui_button",
        "z": "a0153a2235a01066",
        "name": "Force Full Charge",
        "group": "0489adf761799c8a",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "Force Full Charge",
        "tooltip": "If you want to attempt a manual balancing cycle",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "8d13abf189e782ed",
                "4a1ad39e0c228d69"
            ]
        ]
    },
    {
        "id": "a5626118fb069010",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "ChargeToFull",
        "payloadType": "global",
        "x": 140,
        "y": 760,
        "wires": [
            [
                "604f46ac7f105e7b"
            ]
        ]
    },
    {
        "id": "43156233db16164b",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Trigger ChargeToFull Manually or after BalanceInterval",
        "info": "",
        "x": 200,
        "y": 520,
        "wires": []
    },
    {
        "id": "6c273b31f504695d",
        "type": "ui_numeric",
        "z": "a0153a2235a01066",
        "name": "Automatic Balancing Interval",
        "label": "Automatic Balancing Interval (Days)",
        "tooltip": "This value is to tell the system every how many days we have to check if there is a need to balance the cells. When the number of days since the last check have been passed the system will trigger a cycle to charge up to 28.4V and look if the batteries start balancing. If not, the timer is reset. If the cells start balancing it waits untill balancing is finished and resets the timer ",
        "group": "0489adf761799c8a",
        "order": 10,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "30",
        "max": "40",
        "step": "1",
        "className": "",
        "x": 300,
        "y": 80,
        "wires": [
            [
                "9119099aef5924b4"
            ]
        ]
    },
    {
        "id": "fbe958fe4554df69",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "30",
        "payloadType": "num",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "6c273b31f504695d"
            ]
        ]
    },
    {
        "id": "9d7b9b40c4e6ac6a",
        "type": "ui_numeric",
        "z": "a0153a2235a01066",
        "name": "Balancing engaged timer",
        "label": "Balancing engaged timer",
        "tooltip": "This value represents the amount of time (in mins) that the balancing logic will wait once the voltage has reached the required level to engage balancing. 28.4V for a 24V system or 14.2V for a 12V system. This is to make certain the cells get the time to start balancing and report to the BMS",
        "group": "0489adf761799c8a",
        "order": 12,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "0",
        "max": "30",
        "step": "5",
        "className": "",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "46191c5740758be0"
            ]
        ]
    },
    {
        "id": "5e03a4e9181555db",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "15",
        "payloadType": "num",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "9d7b9b40c4e6ac6a"
            ]
        ]
    },
    {
        "id": "3775f83ceb32f051",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Convert timestamp to date string",
        "func": "const timestamp = msg.payload;\nconst date = new Date(timestamp);\nconst formattedDate = date.toISOString().slice(0, 10);\n\nreturn {\n    payload: formattedDate,\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 400,
        "wires": [
            [
                "71f3e6035ef1ebf1"
            ]
        ]
    },
    {
        "id": "d38bc62018e87077",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "LastBalance set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "876ab6074a82af01",
                "7d5321421c739f4e"
            ]
        ]
    },
    {
        "id": "480324551696af99",
        "type": "ui_button",
        "z": "a0153a2235a01066",
        "name": "Reset ChargeToFull to 0 ",
        "group": "0d42c411c0f4bfb3",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Reset ChargeToFull to 0 ",
        "tooltip": "If you want to force a manual balancing cycle",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "8d13abf189e782ed"
            ]
        ]
    },
    {
        "id": "f440a8c26e7265c7",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Initial and dashboard values",
        "info": "",
        "x": 120,
        "y": 20,
        "wires": []
    },
    {
        "id": "f562dbbad94d9bb4",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Detect when balancing is happening and completed",
        "info": "",
        "x": 190,
        "y": 820,
        "wires": []
    },
    {
        "id": "74d8af590d0e9632",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 90,
        "y": 600,
        "wires": [
            [
                "8d13abf189e782ed"
            ]
        ]
    },
    {
        "id": "604f46ac7f105e7b",
        "type": "ui_led",
        "z": "a0153a2235a01066",
        "order": 7,
        "group": "0489adf761799c8a",
        "width": 4,
        "height": 1,
        "label": "Charging to Full",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Charging to Full",
        "x": 360,
        "y": 760,
        "wires": []
    },
    {
        "id": "923b3265f5a059a7",
        "type": "ui_led",
        "z": "a0153a2235a01066",
        "order": 9,
        "group": "0489adf761799c8a",
        "width": 4,
        "height": 1,
        "label": "Balancing",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Bms Balancing",
        "x": 800,
        "y": 940,
        "wires": []
    },
    {
        "id": "9119099aef5924b4",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BalanceInterval",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "46191c5740758be0",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BalanceTime",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "876ab6074a82af01",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "LastBalance",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 360,
        "wires": [
            [
                "3775f83ceb32f051"
            ]
        ]
    },
    {
        "id": "8d13abf189e782ed",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeToFull",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "4a1ad39e0c228d69",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiChargeEnabled",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "eec48c40c128475e",
        "type": "victron-input-battery",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/Info/MaxChargeVoltage",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Aweh BMS"
        },
        "pathObj": {
            "path": "/Info/MaxChargeVoltage",
            "type": "float",
            "name": "CVL - Charge Voltage Limit (V)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 190,
        "y": 1200,
        "wires": [
            [
                "c3097bb109292fc4",
                "f0548456bbbfae27"
            ]
        ]
    },
    {
        "id": "c3097bb109292fc4",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Detect Absorption CVL",
        "func": "const AbsorptionThreshold = flow.get(\"AbsorptionThreshold\");\n\nconst cvl = msg.payload;\n\nif (cvl > AbsorptionThreshold) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"Requesting Absorption\"});\n    return {payload: 1};\n}\n\nnode.status({fill: \"red\", shape: \"dot\", text: \"Not Requesting Absorption\"});\nreturn {payload: 0};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1240,
        "wires": [
            [
                "2a3c7a97c7504deb",
                "a69a6c6810db1b1d"
            ]
        ]
    },
    {
        "id": "bad182fe5ad53e8e",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeToFull",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "ddcca6f206c0be70",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Detect Balancing",
        "func": "const AbsorptionThreshold = flow.get(\"AbsorptionThreshold\");\n\nconst voltage = msg.payload;\n\nconst balancing = voltage >= AbsorptionThreshold;\n\nif (balancing) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"Balancing\"});\n} else {\n    node.status({fill: \"green\", shape: \"ring\", text: \"Idle\"});\n}\n\nreturn {\n    payload: + balancing,  // bool -> int\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1020,
        "wires": [
            [
                "bdd49484fa139c07",
                "c325a2fd5c6095a7"
            ]
        ]
    },
    {
        "id": "3ca1aea2b7d60266",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Save State",
        "info": "",
        "x": 60,
        "y": 1360,
        "wires": []
    },
    {
        "id": "7e42a2588bab852a",
        "type": "file in",
        "z": "a0153a2235a01066",
        "name": "Read balancing_state.yml",
        "filename": "/data/home/nodered/balancing_state.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 530,
        "y": 260,
        "wires": [
            [
                "d270c34965cde2bd"
            ]
        ]
    },
    {
        "id": "d270c34965cde2bd",
        "type": "yaml",
        "z": "a0153a2235a01066",
        "property": "payload",
        "name": "",
        "x": 730,
        "y": 260,
        "wires": [
            [
                "b46d9cd39e0f36d4"
            ]
        ]
    },
    {
        "id": "b46d9cd39e0f36d4",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "Extract LastBalance",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.LastBalance",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 260,
        "wires": [
            [
                "6a0979e04ecd9686"
            ]
        ]
    },
    {
        "id": "d0301b85f8671845",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 1400,
        "wires": [
            [
                "c1374f4e95ee660f"
            ]
        ]
    },
    {
        "id": "c1374f4e95ee660f",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Serialize State",
        "func": "const LastBalance = flow.get(\"LastBalance\");\n\nreturn {\n    payload: {\n        LastBalance,\n    },\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1400,
        "wires": [
            [
                "b5b2aff3bee12061"
            ]
        ]
    },
    {
        "id": "0d0d81337a6c63a8",
        "type": "yaml",
        "z": "a0153a2235a01066",
        "property": "payload",
        "name": "",
        "x": 590,
        "y": 1400,
        "wires": [
            [
                "d6427b9ecace7567"
            ]
        ]
    },
    {
        "id": "d6427b9ecace7567",
        "type": "file",
        "z": "a0153a2235a01066",
        "name": "Write balancing_state.yml",
        "filename": "/data/home/nodered/balancing_state.yml",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "7d5321421c739f4e",
        "type": "delay",
        "z": "a0153a2235a01066",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 300,
        "wires": [
            [
                "7e42a2588bab852a"
            ]
        ]
    },
    {
        "id": "76886a5b99109a57",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Default to current time, but trigger loading state from disk",
        "info": "",
        "x": 210,
        "y": 220,
        "wires": []
    },
    {
        "id": "6a0979e04ecd9686",
        "type": "switch",
        "z": "a0153a2235a01066",
        "name": "Filter Valid",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1130,
        "y": 260,
        "wires": [
            [
                "876ab6074a82af01"
            ]
        ]
    },
    {
        "id": "b5b2aff3bee12061",
        "type": "rbe",
        "z": "a0153a2235a01066",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 450,
        "y": 1400,
        "wires": [
            [
                "0d0d81337a6c63a8"
            ]
        ]
    },
    {
        "id": "5933497f39bd3b73",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "Manual Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "7e42a2588bab852a"
            ]
        ]
    },
    {
        "id": "bdd49484fa139c07",
        "type": "rbe",
        "z": "a0153a2235a01066",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 630,
        "y": 940,
        "wires": [
            [
                "f39cb4e620f6587a",
                "923b3265f5a059a7"
            ]
        ]
    },
    {
        "id": "f39cb4e620f6587a",
        "type": "switch",
        "z": "a0153a2235a01066",
        "name": "Detect Start",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 980,
        "wires": [
            [
                "1c8398f3cab85cb6"
            ]
        ]
    },
    {
        "id": "1c8398f3cab85cb6",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BalanceStartTime",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "c325a2fd5c6095a7",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Detect Balancing for BalanceTime",
        "func": "const balancing = msg.payload;\nconst now = Date.now();\n\nif (balancing == 0) {\n    node.status({fill: \"grey\", shape: \"ring\", text: \"Idle\"});\n    return;\n}\n\nconst BalanceStartTime = flow.get(\"BalanceStartTime\");\nconst BalanceTime = flow.get(\"BalanceTime\");\nconst BalanceTimeMillis = BalanceTime * 60 * 1000;\n\nif (now > BalanceStartTime + BalanceTimeMillis) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"Done!\"});\n    return {\n        payload: 0,\n    }\n} else {\n    node.status({fill: \"yellow\", shape: \"dot\", text: \"Balancing...\"});\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1020,
        "wires": [
            [
                "0771e50b5d9a6f16"
            ]
        ]
    },
    {
        "id": "65f2ef9b0f400360",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeToFull",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "0771e50b5d9a6f16",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "LastBalance",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "eb47da62594c2ffa",
        "type": "victron-input-custom",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/History/TimeSinceLastFullCharge",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Aweh BMS (0)"
        },
        "pathObj": {
            "path": "/History/TimeSinceLastFullCharge",
            "name": "/History/TimeSinceLastFullCharge",
            "type": "number"
        },
        "name": "",
        "onlyChanges": false,
        "x": 230,
        "y": 460,
        "wires": [
            [
                "51e81b316c9ddcd1"
            ]
        ]
    },
    {
        "id": "c6d19d82cc5abc7c",
        "type": "victron-input-battery",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/Dc/0/Voltage",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Aweh BMS"
        },
        "pathObj": {
            "path": "/Dc/0/Voltage",
            "type": "float",
            "name": "Battery voltage (V)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 150,
        "y": 1020,
        "wires": [
            [
                "ddcca6f206c0be70"
            ]
        ]
    },
    {
        "id": "51e81b316c9ddcd1",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Convert seconds to date string",
        "func": "const secondsAgo = msg.payload;\n\nconst now = new Date();\nconst last_full = new Date(now.getTime() - secondsAgo * 1000);\nconst formatted_last_full = last_full.toISOString().slice(0, 10);\n\nreturn {\n    payload: formatted_last_full,\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 460,
        "wires": [
            [
                "08ad03d2e999060f"
            ]
        ]
    },
    {
        "id": "08ad03d2e999060f",
        "type": "ui_text",
        "z": "a0153a2235a01066",
        "group": "0489adf761799c8a",
        "order": 6,
        "width": "5",
        "height": "1",
        "name": "Last Full Date",
        "label": "Last Full Date",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 460,
        "wires": []
    },
    {
        "id": "1038f676e6d3d138",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Detect Full",
        "func": "const BMSRequestAbsorption = flow.get(\"BMSRequestAbsorption\");\n\n// Let the batteries continue to balance as long as the BMS wants to\nif (msg.payload >= 99.5 && BMSRequestAbsorption === 0) {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1080,
        "wires": [
            [
                "65f2ef9b0f400360"
            ]
        ]
    },
    {
        "id": "2a3c7a97c7504deb",
        "type": "switch",
        "z": "a0153a2235a01066",
        "name": "Detect BMS Request",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 740,
        "y": 1280,
        "wires": [
            [
                "bad182fe5ad53e8e"
            ]
        ]
    },
    {
        "id": "a69a6c6810db1b1d",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BMSRequestAbsorption",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "9255448c6aa8ff87",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Trigger balancing from the BMS",
        "info": "",
        "x": 130,
        "y": 1160,
        "wires": []
    },
    {
        "id": "f0548456bbbfae27",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ChargeVoltageLimit",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "d2e395f3a1c210a5",
        "type": "victron-input-battery",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/Soc",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Aweh BMS"
        },
        "pathObj": {
            "path": "/Soc",
            "type": "float",
            "name": "State of charge (%)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 150,
        "y": 1080,
        "wires": [
            [
                "1038f676e6d3d138"
            ]
        ]
    },
    {
        "id": "46a26c67b0b595f0",
        "type": "victron-input-custom",
        "z": "a0153a2235a01066",
        "service": "com.victronenergy.battery/0",
        "path": "/Settings/Battery/NominalVoltage",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Aweh BMS (0)"
        },
        "pathObj": {
            "path": "/Settings/Battery/NominalVoltage",
            "name": "/Settings/Battery/NominalVoltage",
            "type": "number"
        },
        "name": "",
        "onlyChanges": false,
        "x": 200,
        "y": 880,
        "wires": [
            [
                "1211c0daa0aecb0c"
            ]
        ]
    },
    {
        "id": "1211c0daa0aecb0c",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Calculate Absorption Threshold",
        "func": "const system_voltage = msg.payload;\nconst threshold = 1.18125 * system_voltage;  // 14.175 / 28.35V\n\nnode.status({text: threshold});\n\nreturn {\n    payload: threshold,\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 880,
        "wires": [
            [
                "dbafb36232b6d50c"
            ]
        ]
    },
    {
        "id": "dbafb36232b6d50c",
        "type": "change",
        "z": "a0153a2235a01066",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AbsorptionThreshold",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "948816cde80707d5",
        "type": "function",
        "z": "a0153a2235a01066",
        "name": "Debug for flow values ",
        "func": "const variableNames = [\n    \"AbsorptionThreshold\",\n    \"BalanceInterval\",\n    \"BalanceTime\",\n    \"BalanceStartTime\",\n    \"BMSRequestAbsorption\",\n    \"LastBalance\",\n];\n\nconst flowValues = Object.fromEntries(\n    variableNames.map(name => [name, flow.get(name)])\n);\n\nreturn {\n    payload: flowValues,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1520,
        "wires": [
            [
                "d6d8fa0ec312a177"
            ]
        ]
    },
    {
        "id": "d6d8fa0ec312a177",
        "type": "debug",
        "z": "a0153a2235a01066",
        "name": "Balancing Flow variables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1520,
        "wires": []
    },
    {
        "id": "7bf4dc98beef7636",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1520,
        "wires": [
            [
                "948816cde80707d5"
            ]
        ]
    },
    {
        "id": "3282d9ddc63724f1",
        "type": "comment",
        "z": "a0153a2235a01066",
        "name": "Debug",
        "info": "",
        "x": 50,
        "y": 1460,
        "wires": []
    },
    {
        "id": "b6b99e70790359b5",
        "type": "inject",
        "z": "a0153a2235a01066",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "LastBalance",
        "payloadType": "flow",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "3775f83ceb32f051"
            ]
        ]
    },
    {
        "id": "246f15d8289cb3fb",
        "type": "inject",
        "z": "2cfbbcc39f1935b5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "16",
        "payloadType": "num",
        "x": 70,
        "y": 80,
        "wires": [
            [
                "b7c8bed0723f7a25"
            ]
        ]
    },
    {
        "id": "b7c8bed0723f7a25",
        "type": "ui_numeric",
        "z": "2cfbbcc39f1935b5",
        "name": "Shore Max Current",
        "label": "Shore Max Current",
        "tooltip": "The value represents the maximum the system is allowed to draw when on shore power",
        "group": "2d51d403d65e5320",
        "order": 1,
        "width": "9",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} A",
        "min": 0,
        "max": "50",
        "step": 1,
        "className": "",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "c1d1cf630496e202"
            ]
        ]
    },
    {
        "id": "c1d1cf630496e202",
        "type": "victron-output-vebus",
        "z": "2cfbbcc39f1935b5",
        "service": "com.victronenergy.vebus/276",
        "path": "/Ac/ActiveIn/CurrentLimit",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "Aweh Inverter"
        },
        "pathObj": {
            "path": "/Ac/ActiveIn/CurrentLimit",
            "type": "float",
            "name": "Active input current limit (A)",
            "writable": true
        },
        "name": "Current Limit Multi",
        "onlyChanges": false,
        "x": 470,
        "y": 80,
        "wires": []
    },
    {
        "id": "5fee94ca1a17feea",
        "type": "comment",
        "z": "2cfbbcc39f1935b5",
        "name": "Configure a static Shore Power Input Limit",
        "info": "",
        "x": 160,
        "y": 20,
        "wires": []
    },
    {
        "id": "a73a4f58285c0ddc",
        "type": "ui_gauge",
        "z": "2cfbbcc39f1935b5",
        "name": "Vessel Input A",
        "group": "2d51d403d65e5320",
        "order": 11,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Vessel Input A",
        "label": "A",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "32",
        "seg2": "45",
        "diff": false,
        "className": "",
        "x": 280,
        "y": 200,
        "wires": []
    },
    {
        "id": "7083e59f24c469b7",
        "type": "victron-input-vebus",
        "z": "2cfbbcc39f1935b5",
        "service": "com.victronenergy.vebus/276",
        "path": "/Ac/ActiveIn/L1/I",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "Aweh Inverter"
        },
        "pathObj": {
            "path": "/Ac/ActiveIn/L1/I",
            "type": "float",
            "name": "Input current phase 1 (A)"
        },
        "name": "Vessel Input A",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "a73a4f58285c0ddc"
            ]
        ]
    },
    {
        "id": "5731d5ae072c55e6",
        "type": "ui_gauge",
        "z": "2cfbbcc39f1935b5",
        "name": "Vessel Input W",
        "group": "2d51d403d65e5320",
        "order": 10,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Vessel Input W",
        "label": "W",
        "format": "{{value}}",
        "min": 0,
        "max": "3840",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "7000",
        "seg2": "12000",
        "diff": false,
        "className": "",
        "x": 300,
        "y": 260,
        "wires": []
    },
    {
        "id": "73215114a4db7807",
        "type": "ui_gauge",
        "z": "2cfbbcc39f1935b5",
        "name": "Vessel Input V",
        "group": "2d51d403d65e5320",
        "order": 9,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Vessel Input V",
        "label": "V",
        "format": "{{value}}",
        "min": "180",
        "max": "250",
        "colors": [
            "#ca3838",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "240",
        "diff": false,
        "className": "",
        "x": 280,
        "y": 140,
        "wires": []
    },
    {
        "id": "4498971be8e47816",
        "type": "victron-input-vebus",
        "z": "2cfbbcc39f1935b5",
        "service": "com.victronenergy.vebus/276",
        "path": "/Ac/ActiveIn/L1/P",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "Aweh Inverter"
        },
        "pathObj": {
            "path": "/Ac/ActiveIn/L1/P",
            "type": "float",
            "name": "Input power phase 1 (W)"
        },
        "name": "Vessel Input W",
        "onlyChanges": false,
        "x": 100,
        "y": 260,
        "wires": [
            [
                "5731d5ae072c55e6"
            ]
        ]
    },
    {
        "id": "dd113eae4833796e",
        "type": "victron-input-vebus",
        "z": "2cfbbcc39f1935b5",
        "service": "com.victronenergy.vebus/276",
        "path": "/Ac/ActiveIn/L1/V",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "Aweh Inverter"
        },
        "pathObj": {
            "path": "/Ac/ActiveIn/L1/V",
            "type": "float",
            "name": "Input voltage phase 1 (VAC)"
        },
        "name": "Vessel Input V",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "73215114a4db7807"
            ]
        ]
    },
    {
        "id": "87b2240eaed6c78a",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MultiChargeEnabled",
        "payloadType": "global",
        "x": 160,
        "y": 800,
        "wires": [
            [
                "6baec025b7409eda"
            ]
        ]
    },
    {
        "id": "a5e415478fddb578",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Set MultiChargeEnabled based on SoC",
        "func": "const ChargeToFull = global.get(\"ChargeToFull\");\nconst MultiMode = flow.get(\"MultiMode\");\nconst BattSoc = global.get(\"BattSoc\");\nconst MultiMaxSoc = global.get(\"MultiMaxSoc\");\nconst RestartSoc = global.get(\"RestartSoc\");\nlet MultiChargeEnabled = global.get(\"MultiChargeEnabled\");\n\nconst MultiModes = Object.freeze({\n    CHARGER_ONLY: 1,\n    INVERTER_ONLY: 2,\n    ON: 3,\n    OFF: 4,\n});\n\nif (MultiChargeEnabled === 0) {\n    if (ChargeToFull === 1) {\n        MultiChargeEnabled = 1;\n    }\n    if (BattSoc <= RestartSoc) {\n        MultiChargeEnabled = 1;\n    }\n} else if (MultiChargeEnabled === 1) {\n    if (BattSoc >= MultiMaxSoc) {\n        if (ChargeToFull === 1) {\n            node.status({fill: \"yellow\", shape: \"dot\", text: \"Balancing\"});\n            return;\n        }\n        MultiChargeEnabled = 0;\n    }\n} else if (MultiChargeEnabled === undefined) {\n    node.warn(\"Startup: Guessing MultiChargeEnabled from MultiMode: \" + MultiMode);\n    if (MultiMode === MultiModes.INVERTER_ONLY\n        || MultiMode === MultiModes.OFF) {\n        MultiChargeEnabled = 0;\n    } else if (MultiMode === MultiModes.CHARGER_ONLY\n               || MultiMode == MultiModes.ON) {\n        MultiChargeEnabled = 1;\n    }\n}\n\nif (MultiChargeEnabled === 1) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"Enable\"});\n} else {\n    node.status({fill: \"red\", shape: \"dot\", text: \"Disable\"});\n}\n\nreturn {\n    payload: MultiChargeEnabled,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 860,
        "wires": [
            [
                "a061d7684091f4c1"
            ]
        ]
    },
    {
        "id": "f980f9d786269cb1",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 860,
        "wires": [
            [
                "a5e415478fddb578"
            ]
        ]
    },
    {
        "id": "698e518d68d73c8a",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "Charge Cycle Enabled. Determine Charge status from SoC and Balancing",
        "info": "",
        "x": 260,
        "y": 740,
        "wires": []
    },
    {
        "id": "5a28a777b8e23ea1",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Inject Cycle mgmt Auto",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "1987d79b4b49ed81"
            ]
        ]
    },
    {
        "id": "d957038887770b9a",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "User interactive Local Values",
        "info": "Auto = 1\nManual = 0",
        "x": 120,
        "y": 200,
        "wires": []
    },
    {
        "id": "c8ce07bb531f28cb",
        "type": "victron-output-vebus",
        "z": "d2855c6ff5fe1d8c",
        "service": "com.victronenergy.vebus/276",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "MultiPlus 24/3000/70-50"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Switch Position",
            "remarks": "<p>Note that <tt>/ModeIsAdjustable</tt> needs to be set to 1.</p> ",
            "enum": {
                "1": "Charger Only",
                "2": "Inverter Only",
                "3": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 600,
        "y": 1000,
        "wires": []
    },
    {
        "id": "deb41ea4feccb814",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Control MultiPlus Mode",
        "func": "const MultiMode = flow.get(\"MultiMode\");\nconst MultiSocMgmt = flow.get(\"MultiSocMgmt\");\nlet MultiChargeEnabled = global.get(\"MultiChargeEnabled\");\n\nconst MultiModes = Object.freeze({\n    CHARGER_ONLY: 1,\n    INVERTER_ONLY: 2,\n    ON: 3,\n    OFF: 4,\n});\n\nif (MultiSocMgmt !== 1) {\n    node.status({fill: \"red\", shape: \"ring\", text: \"Management Disabled\"});\n    return;\n}\n\nif (MultiChargeEnabled === 0) {\n    if (MultiMode === MultiModes.CHARGER_ONLY) {\n        node.status({fill: \"red\", shape: \"dot\", text: \"Off\"});\n        return {\n            payload: MultiModes.OFF,\n        };\n    } else if (MultiMode === MultiModes.ON) {\n        node.status({fill: \"red\", shape: \"dot\", text: \"Charging off\"});\n        return {\n            payload: MultiModes.INVERTER_ONLY,\n        };\n    }\n} else if (MultiChargeEnabled === 1) {\n    if (MultiMode === MultiModes.OFF) {\n        node.status({fill: \"green\", shape: \"dot\", text: \"On\"});\n        return {\n            payload: MultiModes.CHARGER_ONLY,\n        };\n    } else if (MultiMode === MultiModes.INVERTER_ONLY) {\n        node.status({fill: \"green\", shape: \"dot\", text: \"Charging on\"});\n        return {\n            payload: MultiModes.ON,\n        };\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1000,
        "wires": [
            [
                "c8ce07bb531f28cb"
            ]
        ]
    },
    {
        "id": "4de1a353c38c659a",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 90,
        "y": 1000,
        "wires": [
            [
                "deb41ea4feccb814"
            ]
        ]
    },
    {
        "id": "2a69e133e2c7e75c",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "Control MultiPlus from MultiChargeEnabled",
        "info": "",
        "x": 160,
        "y": 940,
        "wires": []
    },
    {
        "id": "5870ed0a978fa7e4",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "Function Debug",
        "info": "",
        "x": 80,
        "y": 1080,
        "wires": []
    },
    {
        "id": "24f28037501616c0",
        "type": "comment",
        "z": "d2855c6ff5fe1d8c",
        "name": "Dashboard nodes",
        "info": "",
        "x": 90,
        "y": 20,
        "wires": []
    },
    {
        "id": "ce86be16270c0d94",
        "type": "victron-input-vebus",
        "z": "d2855c6ff5fe1d8c",
        "service": "com.victronenergy.vebus/276",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.vebus/276",
            "name": "MultiPlus 24/3000/70-50"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Switch Position",
            "enum": {
                "1": "Charger Only",
                "2": "Inverter Only",
                "3": "On",
                "4": "Off"
            }
        },
        "initial": "",
        "name": "Multiplus state",
        "onlyChanges": false,
        "x": 90,
        "y": 100,
        "wires": [
            [
                "bf03eb793443f2dc"
            ]
        ]
    },
    {
        "id": "e5277738d6d2b828",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "d": true,
        "name": "Set Charging enabled",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 140,
        "y": 1140,
        "wires": [
            [
                "e096b110d010bf83"
            ]
        ]
    },
    {
        "id": "e096b110d010bf83",
        "type": "ui_button",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "group": "0489adf761799c8a",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "label": "Reset Charging Enabled",
        "tooltip": "If, for any reason you would want to interrupt the cycle between maximum state of charge and restart state of charge to force the system into charging again (while on shore power) ",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 1140,
        "wires": [
            [
                "5e57135c4779c7b7"
            ]
        ]
    },
    {
        "id": "9916b1ee0c1a1e61",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Sailing Restart SOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "SailRestartSoc",
        "payloadType": "global",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "38dadb3525bc4d5b"
            ]
        ]
    },
    {
        "id": "38dadb3525bc4d5b",
        "type": "ui_numeric",
        "z": "d2855c6ff5fe1d8c",
        "name": "Sailing Restart SOC",
        "label": "Sailing Restart SoC",
        "tooltip": "This value represents the lower state of charge at wich we will start charging again. This value is only used when connected on shore power to have the batteries perform small cycles and not remain fully charged as this results in damage to the cells. ",
        "group": "2d51d403d65e5320",
        "order": 6,
        "width": "7",
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} %",
        "min": "30",
        "max": "90",
        "step": "5",
        "className": "",
        "x": 380,
        "y": 460,
        "wires": [
            [
                "d2d8a2d5abc671c2"
            ]
        ]
    },
    {
        "id": "1482d67ad29cd7ad",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Set to 0 for debug",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 130,
        "y": 1200,
        "wires": [
            [
                "e096b110d010bf83"
            ]
        ]
    },
    {
        "id": "5977a08cd7ea3ac7",
        "type": "ui_numeric",
        "z": "d2855c6ff5fe1d8c",
        "name": "Storage Max SOC",
        "label": "Storage Max SoC",
        "tooltip": "This value sets the maximum threshold of the battery charge is %. Once reached, charging sources will stop.",
        "group": "2d51d403d65e5320",
        "order": 3,
        "width": "7",
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}} %",
        "min": "40",
        "max": "80",
        "step": "5",
        "className": "",
        "x": 370,
        "y": 560,
        "wires": [
            [
                "afd91e32e314f86f"
            ]
        ]
    },
    {
        "id": "46414d1d40677bbf",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "StorMaxSoc",
        "payloadType": "global",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "5977a08cd7ea3ac7"
            ]
        ]
    },
    {
        "id": "79a93b0453fdb9f2",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "Storage Restart SOC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "StorRestartSoc",
        "payloadType": "global",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "8eec334b7bd645ab"
            ]
        ]
    },
    {
        "id": "8eec334b7bd645ab",
        "type": "ui_numeric",
        "z": "d2855c6ff5fe1d8c",
        "name": "Storage Restart SOC",
        "label": "Storage Restart SoC",
        "tooltip": "This value represents the lower state of charge at wich we will start charging again. This value is only used when connected on shore power to have the batteries perform small cycles and not remain fully charged as this results in damage to the cells. ",
        "group": "2d51d403d65e5320",
        "order": 4,
        "width": "7",
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} %",
        "min": "30",
        "max": "55",
        "step": "5",
        "className": "",
        "x": 380,
        "y": 420,
        "wires": [
            [
                "265293601f0728eb"
            ]
        ]
    },
    {
        "id": "fb8ce8ac918c8ba7",
        "type": "ui_numeric",
        "z": "d2855c6ff5fe1d8c",
        "name": "Sailing Max SOC",
        "label": "Sailing Max Soc",
        "tooltip": "This value sets the maximum threshold of the battery charge is %. Once reached, charging sources will stop.",
        "group": "2d51d403d65e5320",
        "order": 5,
        "width": "7",
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}} %",
        "min": "80",
        "max": "99",
        "step": "1",
        "className": "",
        "x": 370,
        "y": 600,
        "wires": [
            [
                "38a18d369df71dd4"
            ]
        ]
    },
    {
        "id": "acb0b74e3193428e",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "global.SailMaxSoc",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SailMaxSoc",
        "payloadType": "global",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "fb8ce8ac918c8ba7"
            ]
        ]
    },
    {
        "id": "a51f92c7f1867893",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Select MaxSoc",
        "func": "const CycleMgmt = flow.get(\"CycleMgmt\");\nconst StorMaxSoc = global.get(\"StorMaxSoc\");\nconst SailMaxSoc = global.get(\"SailMaxSoc\");\n\nconst CycleMgmtModes = Object.freeze({\n    OFF: 1,\n    STORAGE: 2,\n    MARINA: 3,\n    SAILING: 4,\n});\n\nlet MultiMaxSoc = null;\nlet SolarMaxSoc = null;\n\nif (CycleMgmt === CycleMgmtModes.OFF) {\n    MultiMaxSoc = null;\n    SolarMaxSoc = null;\n} else if (CycleMgmt === CycleMgmtModes.STORAGE) {\n    MultiMaxSoc = StorMaxSoc;\n    SolarMaxSoc = StorMaxSoc;\n} else if (CycleMgmt === CycleMgmtModes.MARINA) {\n    MultiMaxSoc = StorMaxSoc;\n    SolarMaxSoc = SailMaxSoc;\n} else if (CycleMgmt === CycleMgmtModes.SAILING) {\n    MultiMaxSoc = SailMaxSoc;\n    SolarMaxSoc = SailMaxSoc;\n}\n\nnode.status({text: MultiMaxSoc});\nreturn {\n    payload: {\n        multi: MultiMaxSoc,\n        solar: SolarMaxSoc,\n    },\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 640,
        "wires": [
            [
                "084c75a90bf0b591",
                "ab1dea7f144c4f08"
            ]
        ]
    },
    {
        "id": "1abe231616e3aa60",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "a51f92c7f1867893"
            ]
        ]
    },
    {
        "id": "6baec025b7409eda",
        "type": "ui_led",
        "z": "d2855c6ff5fe1d8c",
        "order": 8,
        "group": "2d51d403d65e5320",
        "width": 3,
        "height": 1,
        "label": "AC Charging Enabled",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Multiplus Charging Enabled",
        "x": 440,
        "y": 800,
        "wires": []
    },
    {
        "id": "1987d79b4b49ed81",
        "type": "ui_multistate_switch",
        "z": "d2855c6ff5fe1d8c",
        "name": "Multiplus Management",
        "group": "2d51d403d65e5320",
        "order": 7,
        "width": 6,
        "height": 1,
        "label": "Multiplus Management",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": true,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Automatic",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Manual",
                "value": "0",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 400,
        "y": 260,
        "wires": [
            [
                "ee202e80ed9e3ddc"
            ]
        ]
    },
    {
        "id": "bf03eb793443f2dc",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiMode",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 100,
        "wires": [
            [
                "2969f21f62948814"
            ]
        ]
    },
    {
        "id": "ee202e80ed9e3ddc",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiSocMgmt",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "265293601f0728eb",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "StorRestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "d2d8a2d5abc671c2",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SailRestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "afd91e32e314f86f",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "StorMaxSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "38a18d369df71dd4",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SailMaxSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5e57135c4779c7b7",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiChargeEnabled",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "a061d7684091f4c1",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiChargeEnabled",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "084c75a90bf0b591",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "MultiMaxSoc",
                "pt": "global",
                "to": "payload.multi",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "7406165bb0b4854d",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "5edc41e7ca6a3b36"
            ]
        ]
    },
    {
        "id": "5edc41e7ca6a3b36",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Select RestartSoc",
        "func": "const CycleMgmt = flow.get(\"CycleMgmt\");\nconst StorRestartSoc = global.get(\"StorRestartSoc\");\nconst SailRestartSoc = global.get(\"SailRestartSoc\");\n\nconst CycleMgmtModes = Object.freeze({\n    OFF: 1,\n    STORAGE: 2,\n    MARINA: 3,\n    SAILING: 4,\n});\n\nlet RestartSoc = null;\n\nif (CycleMgmt === CycleMgmtModes.OFF) {\n    RestartSoc = null;\n} else if (CycleMgmt === CycleMgmtModes.STORAGE) {\n    RestartSoc = StorRestartSoc;\n} else if (CycleMgmt === CycleMgmtModes.MARINA) {\n    RestartSoc = StorRestartSoc;\n} else if (CycleMgmt === CycleMgmtModes.SAILING) {\n    RestartSoc =  SailRestartSoc;\n}\n\nnode.status({text: RestartSoc});\nreturn {\n    payload: RestartSoc,\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 500,
        "wires": [
            [
                "f46b27d8942deba5"
            ]
        ]
    },
    {
        "id": "f46b27d8942deba5",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "RestartSoc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "2969f21f62948814",
        "type": "ui_template",
        "z": "d2855c6ff5fe1d8c",
        "group": "2d51d403d65e5320",
        "name": "Display Inverter/Charger State",
        "order": 12,
        "width": 9,
        "height": 2,
        "format": "<style>\n  .container {\n    border: 2px solid #aaa;\n    border-radius: 10px;\n    text-align: center;\n    padding: 10px;\n  }\n\n  .rectangle {\n    display: inline-block;\n    width: 48%;\n    border-radius: 10px;\n    margin-bottom: 0.2ex;\n  }\n\n  .rectangle .label {\n    font-weight: bold;\n    margin: 0;\n    color: black;\n  }\n</style>\n\n<div class=\"container\">\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 3 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">On</span>\n    </div>\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 2 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">Inverter</span>\n    </div>\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 1 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">Charger</span>\n    </div>\n    <div class=\"rectangle\" style=\"background-color: {{msg.payload === 4 ? '#7d94d9' : 'white'}};\">\n        <span class=\"label\">Off</span>\n    </div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 770,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6893f4f8993d3cfe",
        "type": "function",
        "z": "d2855c6ff5fe1d8c",
        "name": "Debug for flow values ",
        "func": "const variableNames = [\n    \"CycleMgmt\",\n    \"MultiMode\",\n    \"MultiSocMgmt\",\n];\n\nconst flowValues = Object.fromEntries(\n    variableNames.map(name => [name, flow.get(name)])\n);\n\nreturn {\n    payload: flowValues,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1260,
        "wires": [
            [
                "e8a168c011c4142c"
            ]
        ]
    },
    {
        "id": "e8a168c011c4142c",
        "type": "debug",
        "z": "d2855c6ff5fe1d8c",
        "name": "Charge Cycle Flow variables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1260,
        "wires": []
    },
    {
        "id": "58c14364bedbe8df",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1260,
        "wires": [
            [
                "6893f4f8993d3cfe"
            ]
        ]
    },
    {
        "id": "7a2edd39b1cd2de7",
        "type": "inject",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 90,
        "y": 340,
        "wires": [
            [
                "67fa06e3caa3daf9"
            ]
        ]
    },
    {
        "id": "5df4336f66d2270b",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CycleMgmt",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "67fa06e3caa3daf9",
        "type": "ui_multistate_switch",
        "z": "d2855c6ff5fe1d8c",
        "name": "Cycle Management setting",
        "group": "2d51d403d65e5320",
        "order": 2,
        "width": 9,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Storage",
                "value": "2",
                "valueType": "num",
                "color": "#999999"
            },
            {
                "label": "Marina",
                "value": "3",
                "valueType": "num",
                "color": "#ff6666"
            },
            {
                "label": "Sailing",
                "value": "4",
                "valueType": "num",
                "color": "#009999"
            }
        ],
        "topic": "",
        "x": 380,
        "y": 340,
        "wires": [
            [
                "5df4336f66d2270b"
            ]
        ]
    },
    {
        "id": "ab1dea7f144c4f08",
        "type": "change",
        "z": "d2855c6ff5fe1d8c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SolarMaxSoc",
                "pt": "global",
                "to": "payload.solar",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "7aeaa83f6eb21266",
        "type": "victron-output-solarcharger",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.solarcharger/291",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/291",
            "name": "Aweh Solar 1"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Charger on/off",
            "enum": {
                "1": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 570,
        "y": 460,
        "wires": []
    },
    {
        "id": "0a5829d3b7be0230",
        "type": "victron-output-solarcharger",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.solarcharger/290",
        "path": "/Mode",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/290",
            "name": "Aweh Solar 2"
        },
        "pathObj": {
            "path": "/Mode",
            "type": "enum",
            "name": "Charger on/off",
            "enum": {
                "1": "On",
                "4": "Off"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 570,
        "y": 520,
        "wires": []
    },
    {
        "id": "e17bceca8d9aec8f",
        "type": "function",
        "z": "81c7a8a38f0557f0",
        "name": "Set MPPT Mode",
        "func": "const SolarMgmt = flow.get(\"SolarMgmt\");\nconst SolarChargeEnabled = flow.get(\"SolarChargeEnabled\");\n\nconst SolarMgmtStates = Object.freeze({\n    ON: 1,\n    OFF: 4,\n    AUTO: 20,\n});\n\nlet SolarState;\n\nif (SolarMgmt === SolarMgmtStates.OFF || SolarMgmt === SolarMgmtStates.ON) {\n    SolarState = SolarMgmt;\n} else if (SolarMgmt === SolarMgmtStates.AUTO) {\n    if (SolarChargeEnabled === 0) {\n        SolarState = SolarMgmtStates.OFF;\n    } else if (SolarChargeEnabled === 1) {\n        SolarState = SolarMgmtStates.ON;\n    }\n}\n\nif (SolarState === SolarMgmtStates.ON) {\n    node.status({fill: \"green\", shape: \"dot\", text: \"On\"});\n} else if (SolarState === SolarMgmtStates.OFF) {\n    node.status({fill: \"red\", shape: \"dot\", text: \"Off\"});\n}\n\nreturn {\n    payload: SolarState,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "7aeaa83f6eb21266",
                "0a5829d3b7be0230"
            ]
        ]
    },
    {
        "id": "a035f5edc4d2b344",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "e17bceca8d9aec8f"
            ]
        ]
    },
    {
        "id": "6689dc14a9c5d257",
        "type": "comment",
        "z": "81c7a8a38f0557f0",
        "name": "Function to manage the solar array based on conditions like battery SOC and balance need. On, Off, or cycle battery on the dashboard",
        "info": "",
        "x": 450,
        "y": 400,
        "wires": []
    },
    {
        "id": "2016e39ae85215a4",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SolarChargeEnabled",
        "payloadType": "flow",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "4ae06a54ee251db9"
            ]
        ]
    },
    {
        "id": "b2d7a81745cd8a06",
        "type": "function",
        "z": "81c7a8a38f0557f0",
        "name": "Determine SolarChargeEnabled based on SoC",
        "func": "const BattSoc = global.get(\"BattSoc\");\nconst ChargeToFull = global.get(\"ChargeToFull\");\nconst RestartSoc = global.get(\"RestartSoc\");\nconst SolarChargeEnabled = flow.get(\"SolarChargeEnabled\");\nconst SolarMaxSoc = global.get(\"SolarMaxSoc\");\nconst SolarMgmt = flow.get(\"SolarMgmt\");\n\nconst SolarMgmtStates = Object.freeze({\n    ON: 1,\n    OFF: 4,\n    AUTO: 20,\n});\n\nif (SolarMgmt === SolarMgmtStates.OFF) {\n    node.status({fill: \"red\", shape: \"ring\", text: \"Manual Disable\"});\n    return {\n        payload: 0,\n    };\n} else {\n    if (ChargeToFull === 1) {\n        node.status({fill: \"yellow\", shape: \"dot\", text: \"Charging to Full\"});\n        return {\n            payload: 1,\n        };\n    }\n}\nif (SolarChargeEnabled) {\n    if (BattSoc > SolarMaxSoc) {\n        node.status({fill: \"red\", shape: \"dot\", text: \"Disable above Max\"});\n        return {\n            payload: 0,\n        };\n    }\n} else {\n    if (BattSoc <= RestartSoc || SolarMgmt === SolarMgmtStates.ON) {\n        node.status({fill: \"green\", shape: \"dot\", text: \"Enable\"});\n        return {\n            payload: 1,\n        };\n    }\n    node.status({fill: \"red\", shape: \"dot\", text: \"Disabled while cycling\"});\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "10f8087979c6514b"
            ]
        ]
    },
    {
        "id": "81069249e14b1f81",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "b2d7a81745cd8a06"
            ]
        ]
    },
    {
        "id": "e02d59ba112ba183",
        "type": "ui_gauge",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "group": "0489adf761799c8a",
        "order": 15,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Battery Voltage",
        "label": "V",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "30",
        "colors": [
            "#f2071f",
            "#00b500",
            "#f2071f"
        ],
        "seg1": "23.5",
        "seg2": "28.5",
        "diff": false,
        "className": "",
        "x": 400,
        "y": 60,
        "wires": []
    },
    {
        "id": "13738945c006a257",
        "type": "victron-input-battery",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.battery/0",
        "path": "/Dc/0/Voltage",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Aweh BMS"
        },
        "pathObj": {
            "path": "/Dc/0/Voltage",
            "type": "float",
            "name": "Battery voltage (V)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "e02d59ba112ba183"
            ]
        ]
    },
    {
        "id": "4a471ea12ff66b39",
        "type": "ui_gauge",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "group": "0489adf761799c8a",
        "order": 14,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Battery Current",
        "label": "A",
        "format": "{{value | number:2}}",
        "min": "-300",
        "max": "300",
        "colors": [
            "#163fe3",
            "#00b500",
            "#f0740f"
        ],
        "seg1": "20",
        "seg2": "150",
        "diff": false,
        "className": "",
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "a44786b2ca271e8d",
        "type": "victron-input-battery",
        "z": "81c7a8a38f0557f0",
        "service": "com.victronenergy.battery/0",
        "path": "/Dc/0/Current",
        "serviceObj": {
            "service": "com.victronenergy.battery/0",
            "name": "Aweh BMS"
        },
        "pathObj": {
            "path": "/Dc/0/Current",
            "type": "float",
            "name": "Battery current (A)"
        },
        "name": "",
        "onlyChanges": false,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "4a471ea12ff66b39"
            ]
        ]
    },
    {
        "id": "3f98e820de81c288",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "Inject Solar ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "20",
        "payloadType": "num",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "c80504f9e191427e"
            ]
        ]
    },
    {
        "id": "4ae06a54ee251db9",
        "type": "ui_led",
        "z": "81c7a8a38f0557f0",
        "order": 2,
        "group": "0489adf761799c8a",
        "width": "3",
        "height": 1,
        "label": "Solar Chg Enabled",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Solar Charging Enabled",
        "x": 430,
        "y": 240,
        "wires": []
    },
    {
        "id": "c80504f9e191427e",
        "type": "ui_multistate_switch",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "group": "0489adf761799c8a",
        "order": 1,
        "width": 6,
        "height": 1,
        "label": "Solar",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Auto",
                "value": "20",
                "valueType": "num",
                "color": "#009999"
            },
            {
                "label": "On",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Off",
                "value": "4",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 290,
        "y": 180,
        "wires": [
            [
                "606f9bbc25ce01b4"
            ]
        ]
    },
    {
        "id": "606f9bbc25ce01b4",
        "type": "change",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SolarMgmt",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "10f8087979c6514b",
        "type": "change",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SolarChargeEnabled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0871559f911fb5b6",
        "type": "function",
        "z": "81c7a8a38f0557f0",
        "name": "Debug for flow values ",
        "func": "const variableNames = [\n    \"SolarChargeEnabled\",\n    \"SolarMgmt\",\n];\n\nconst flowValues = Object.fromEntries(\n    variableNames.map(name => [name, flow.get(name)])\n);\n\nreturn {\n    payload: flowValues,\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 640,
        "wires": [
            [
                "dcbb433e4bdc5525"
            ]
        ]
    },
    {
        "id": "dcbb433e4bdc5525",
        "type": "debug",
        "z": "81c7a8a38f0557f0",
        "name": "Solar Flow variables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 640,
        "wires": []
    },
    {
        "id": "d5f1df230877789a",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "0871559f911fb5b6"
            ]
        ]
    },
    {
        "id": "dcd112d4d7dae198",
        "type": "comment",
        "z": "81c7a8a38f0557f0",
        "name": "Debug",
        "info": "",
        "x": 50,
        "y": 560,
        "wires": []
    },
    {
        "id": "73f207c6baa9c604",
        "type": "inject",
        "z": "81c7a8a38f0557f0",
        "name": "Initialize SolarChargeEnabled",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "10f8087979c6514b"
            ]
        ]
    }
]
